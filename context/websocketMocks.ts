import {
  PriceSize,
  OrderBookFeed,
  OrderBookDeltaMessage,
  Price,
} from "./OBTypescript.types";
// This data feed first returns a snapshot message representing the existing state of the entire orderbook
export const websocketDataFeedMock: OrderBookFeed = {
  numLevels: 25,
  feed: "book_ui_1_snapshot",
  bids: [
    [48356.0, 1450.0],
    [48355.5, 1957.0],
    [48353.0, 1000.0],
    [48351.0, 6510.0],
    [48341.0, 4231.0],
    [48340.5, 12977.0],
    [48340.0, 80492.0],
    [48337.5, 30465.0],
    [48337.0, 12500.0],
    [48336.0, 136766.0],
    [48334.5, 3197.0],
    [48332.0, 5958.0],
    [48330.0, 5515.0],
    [48328.0, 5000.0],
    [48320.5, 9662.0],
    [48320.0, 10022.0],
    [48315.5, 6667.0],
    [48315.0, 8612.0],
    [48314.5, 2024.0],
    [48313.5, 88241.0],
    [48313.0, 276074.0],
    [48311.5, 20000.0],
    [48311.0, 20000.0],
    [48310.5, 150000.0],
    [48308.5, 2953.0],
  ],
  asks: [
    [48356.5, 543.0],
    [48358.0, 28.0],
    [48362.5, 5594.0],
    [48367.0, 3342.0],
    [48371.0, 1000.0],
    [48373.5, 12500.0],
    [48375.5, 1833.0],
    [48377.0, 4337.0],
    [48379.0, 5361.0],
    [48380.0, 7057.0],
    [48380.5, 13410.0],
    [48381.5, 10000.0],
    [48382.0, 12500.0],
    [48383.0, 5661.0],
    [48383.5, 800.0],
    [48384.0, 200.0],
    [48385.5, 50000.0],
    [48387.5, 15994.0],
    [48390.5, 105019.0],
    [48391.0, 70630.0],
    [48395.5, 7014.0],
    [48397.5, 15000.0],
    [48401.5, 2900.0],
    [48402.5, 25000.0],
    [48407.0, 11754.0],
  ],
  product_id: "PI_XBTUSD",
};

// This is followed by delta messages representing singular updates to price levels
// within the book. The orders returned by the feed are in the format of [price, size][].
// If the size returned by a delta is 0 then that price level should be removed from
// the orderbook, otherwise you can safely overwrite the state of that price level
// with new data returned by that delta.
export const websocketDeltaMock: OrderBookDeltaMessage = {
  feed: "book_ui_1",
  product_id: "PI_XBTUSD",
  bids: [
    [47771.5, 470714.0],
    [48138.0, 232189.0],
    [48286.0, 1638.0],
    [48313.5, 88240.0],
    [48339.5, 2500.0],
  ],
  asks: [
    [48367.5, 2500.0],
    [48379.5, 10000.0],
    [48381.5, 0.0],
    [48385.0, 50000.0],
    [48385.5, 0.0],
    [48397.0, 15000.0],
    [48397.5, 0.0],
    [48411.0, 66306.0],
    [48449.0, 120614.0],
    [48607.5, 240832.0],
    [48923.0, 480506.0],
  ],
};

export const bidOrdersMockWithTotal: PriceSize[] = [
  [48356, 1450, 1450],
  [48355.5, 1957, 3407],
  [48353, 1000, 4407],
  [48351, 6510, 10917],
  [48341, 4231, 15148],
  [48340.5, 12977, 28125],
  [48340, 80492, 108617],
  [48337.5, 30465, 139082],
  [48337, 12500, 151582],
  [48336, 136766, 288348],
  [48334.5, 3197, 291545],
  [48332, 5958, 297503],
  [48330, 5515, 303018],
  [48328, 5000, 308018],
  [48320.5, 9662, 317680],
  [48320, 10022, 327702],
  [48315.5, 6667, 334369],
  [48315, 8612, 342981],
  [48314.5, 2024, 345005],
  [48313.5, 88241, 433246],
  [48313, 276074, 709320],
  [48311.5, 20000, 729320],
  [48311, 20000, 749320],
  [48310.5, 150000, 899320],
  [48308.5, 2953, 902273],
];

console.log(
  (
    (bidOrdersMockWithTotal[20][2] /
      bidOrdersMockWithTotal[bidOrdersMockWithTotal.length - 1][2]) *
    100
  ).toFixed(2)
);
export const askOrdersMockWithTotal: PriceSize[] = [
  [48356.5, 543.0, 543],
  [48358.0, 28.0, 571],
  [48362.5, 5594.0, 6165],
  [48367.0, 3342.0, 9507],
  [48371.0, 1000.0, 10507],
  [48373.5, 12500.0, 23007],
  [48375.5, 1833.0, 24840],
  [48377.0, 4337.0, 29177],
  [48379.0, 5361.0, 34538],
  [48380.0, 7057.0, 41595],
  [48380.5, 13410.0, 55005],
  [48381.5, 10000.0, 65005],
  [48382.0, 12500.0, 77505],
  [48383.0, 5661.0, 83166],
  [48383.5, 800.0, 83966],
  [48384.0, 200.0, 84166],
  [48385.5, 50000.0, 134166],
  [48387.5, 15994.0, 150160],
  [48390.5, 105019.0, 255179],
  [48391.0, 70630.0, 325809],
  [48395.5, 7014.0, 332823],
  [48397.5, 15000.0, 347823],
  [48401.5, 2900.0, 350723],
  [48402.5, 25000.0, 375723],
  [48407.0, 11754.0, 387477],
];
